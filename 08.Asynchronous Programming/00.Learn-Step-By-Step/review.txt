1.Promises are JavaScript objects that represent the eventual result of an asynchronous operation.

2.Promises can be in one of three states: pending, resolved, or rejected.

3.A promise is settled if it is either resolved or rejected.

4.We construct a promise by using the new keyword and passing an executor function to the Promise constructor method.

5.setTimeout() is a Node function which delays the execution of a callback function using the event-loop.

6.We use .then() with a success handler callback containing the logic for what should happen if a promise resolves.

7.We use .catch() with a failure handler callback containing the logic for what should happen if a promise rejects.

8.Promise composition enables us to write complex, asynchronous code that’s still readable. We do this by chaining multiple .then()‘s and .catch()‘s.

9.To use promise composition correctly, we have to remember to return promises constructed within a .then().

10.We should chain multiple promises rather than nesting them.

11To take advantage of concurrency, we can use Promise.all().
